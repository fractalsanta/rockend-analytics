/**
 * Property Management API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class IPropertyManagementApi {
    protected basePath = 'https://temp.com/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary Get Current Month
     * @param agencyId The Agency id
     * @param propType The property type
     * @param agent Get for agent
     */
    public getCurrentMonth (agencyId: number, propType?: string, agent?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.CurrentMonth>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/currentmonth'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getCurrentMonth.');
        }

        if (propType !== undefined) {
            queryParameters['propType'] = propType;
        }

        if (agent !== undefined) {
            queryParameters['agent'] = agent;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get Gain/Lost By Month
     * @param agencyId The Agency id
     * @param financialMonth Financial month filter
     * @param propType The property type
     * @param suburb Suburb filter
     * @param agent Get for agent
     */
    public getGainLostByMonth (agencyId: number, financialMonth: number, propType?: string, suburb?: string, agent?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.GainLostByMonth>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/gainlostbymonth'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getGainLostByMonth.');
        }

        // verify required parameter 'financialMonth' is not null or undefined
        if (financialMonth === null || financialMonth === undefined) {
            throw new Error('Required parameter financialMonth was null or undefined when calling getGainLostByMonth.');
        }

        if (financialMonth !== undefined) {
            queryParameters['financialMonth'] = financialMonth;
        }

        if (propType !== undefined) {
            queryParameters['propType'] = propType;
        }

        if (suburb !== undefined) {
            queryParameters['suburb'] = suburb;
        }

        if (agent !== undefined) {
            queryParameters['agent'] = agent;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get management fees by financial month
     * @param agencyId The Agency id
     * @param monthno The financial month number
     */
    public getManagementFeesByMonth (agencyId: number, monthno: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.ManagementFee>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/managementfees'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getManagementFeesByMonth.');
        }

        // verify required parameter 'monthno' is not null or undefined
        if (monthno === null || monthno === undefined) {
            throw new Error('Required parameter monthno was null or undefined when calling getManagementFeesByMonth.');
        }

        if (monthno !== undefined) {
            queryParameters['monthno'] = monthno;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get portfolio agents
     * @param agencyId The Agency id
     */
    public getPortfolioAgents (agencyId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Agent>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/portfolioagents'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getPortfolioAgents.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get Property Data By Quarter
     * @param agencyId The Agency id
     * @param propType The property type
     */
    public getPropertyDataByQuarter (agencyId: number, propType?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.PropertyDataByQuarter>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/byquarter'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getPropertyDataByQuarter.');
        }

        if (propType !== undefined) {
            queryParameters['propType'] = propType;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get property types
     * @param agencyId The Agency id
     */
    public getPropertyTypes (agencyId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.PropertyType>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/propertytypes'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getPropertyTypes.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get Rent Amount Collected By Month
     * @param agencyId The Agency id
     * @param financialMonth Financial month filter
     * @param propType The property type
     * @param suburb Suburb filter
     */
    public getRentAmountByMonth (agencyId: number, financialMonth: number, propType?: string, suburb?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.RentAmountByMonth>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/rentamountbymonth'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getRentAmountByMonth.');
        }

        // verify required parameter 'financialMonth' is not null or undefined
        if (financialMonth === null || financialMonth === undefined) {
            throw new Error('Required parameter financialMonth was null or undefined when calling getRentAmountByMonth.');
        }

        if (financialMonth !== undefined) {
            queryParameters['financialMonth'] = financialMonth;
        }

        if (propType !== undefined) {
            queryParameters['propType'] = propType;
        }

        if (suburb !== undefined) {
            queryParameters['suburb'] = suburb;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get Top Suburbs
     * @param agencyId The Agency id
     */
    public getTopSuburbs (agencyId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Suburb>> {
        const localVarPath = this.basePath + '/propertymanagement/{agencyId}/topsuburbs'
            .replace('{' + 'agencyId' + '}', encodeURIComponent(String(agencyId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agencyId' is not null or undefined
        if (agencyId === null || agencyId === undefined) {
            throw new Error('Required parameter agencyId was null or undefined when calling getTopSuburbs.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
